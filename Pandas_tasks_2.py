# -*- coding: utf-8 -*-
"""Copy of session-17-tasks.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/13ea833SkiGDpRSKLlyWtZsJAjfjw4uXx
"""

"https://raw.githubusercontent.com/justmarkham/DAT8/master/data/chipotle.tsv"

"""## Basic DataFrame

Consider the following Python dictionary data and Python list labels:

```
data = {'birds': ['Cranes', 'Cranes', 'plovers', 'spoonbills', 'spoonbills', 'Cranes', 'plovers', 'Cranes', 'spoonbills', 'spoonbills', 'Cranes'],
        'age': [3.5, 4, 1.5, np.nan, 6, 3, 5.5, np.nan, 8, 4, 3.5], 'visits': [2, 4, 3, 4, 3, 4, 2, 2, 3, 2, 2],
        'priority': ['yes', 'yes', 'no', np.nan, 'no', 'no', 'no', 'yes', 'no', 'no','yes']}
```
```
labels = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k']
```

###`Q-1:`
i. Create a DataFrame birds from the above dictionary data which has the index labels.

ii. Display basic information about the dataFrame.

iii. Show Alternate rows of the dataframe.
"""

import numpy as np
import pandas as pd
data = {'birds': ['Cranes', 'Cranes', 'plovers', 'spoonbills', 'spoonbills', 'Cranes', 'plovers', 'Cranes', 'spoonbills', 'spoonbills', 'Cranes'],
        'age': [3.5, 4, 1.5, np.nan, 6, 3, 5.5, np.nan, 8, 4, 3.5], 'visits': [2, 4, 3, 4, 3, 4, 2, 2, 3, 2, 2],
        'priority': ['yes', 'yes', 'no', np.nan, 'no', 'no', 'no', 'yes', 'no', 'no','yes']}

data = pd.DataFrame(data)

#i

df = pd.DataFrame(data['birds'])
df

#ii

df.info()

df.iloc[::2]

"""###`Q-2:`
i. Show only rows [1st, 3rd, 7th] from columns ['bird', 'age']

ii. Select rows where the number of visits is less than 4.
"""

#i
df1 = data[['birds','age']]
df1.iloc[[1,3,7]]

#ii
data[data['visits']<4]

"""###`Q-3:`
i. Select all rows with nan values in age and visits column.

ii. Fill nan with respective series mode value.
"""

#i
data[data['age'].isna() | data['visits'].isna()]

#ii
data['age'].fillna(data['age'].mode()[0], inplace = True)
data

"""###`Q-4`
i. Find the total number of visits of the bird Cranes

ii. Find the number of each type of birds in dataframe.

iii. Print no of duplicate rows

iv. Drop Duplicates rows and make this changes permanent. Show dataframe after changes.
"""

#i
new = data[data['birds']=='Cranes']
new['visits'].sum()

#ii
data['birds'].unique()

#iii
data.duplicated().sum()

#iv
data.drop_duplicates(inplace=True)
data

"""##Question on IPL Data

IPL Data Link :  https://drive.google.com/file/d/1yKVUuexl6lIKuFQy7uIPgDgXhJ0L4SIg/view?usp=share_link

https://www.kaggle.com/datasets/vora1011/ipl-2008-to-2021-all-match-dataset?select=IPL_Matches_2008_2022.csv

Download ipl matches 2008-2022 file.

###`Q-5:` In IPL matches dataset some teams name has changed.
You will have to consider them as same.
```
'Delhi Capitals' formerly as 'Delhi Daredevils'
'Punjab Kings' formerly as 'Kings XI Punjab'
'Rising Pune Supergiant' formerly as 'Rising Pune Supergiants'
```
You need to make changes accordingly. Consider current name for each teams.

Be careful Gujrat Titans and Gujrat Lions are different teams.
"""

ipl = pd.read_csv('/content/IPL_Matches_2008_2022.csv')
new_names = {'Delhi Daredevils':'Delhi Capitals',
             'Kings XI Punjab':'Punjab Kings',
             'Rising Pune Supergiants':'Rising Pune Supergiant'}
ipl.replace(new_names.keys(), new_names.values(), inplace=True)

"""###`Q-6` Write a code which can display the bar chart of top 5 teams who have played maximum number of matches in the IPL.
>  Hint: Be careful the data is divided in 2 different cols(Team 1 and Team 2)

"""

(ipl['Team1'].value_counts()+ipl['Team2'].value_counts()).sort_values(ascending=False).head().plot.bar()

"""###`Q-7:` Player who got Most no. of player of the match award playing against Mumbai Indians.
> Just for this question assume player of the match award is given to players from winning team. Although this is true in most of the cases.

"""

a = (ipl['Team1']=='Mumbai Indians')|(ipl['Team2']=='Mumbai Indians')
b = ipl['WinningTeam'] != 'Mumbai Indians'
ipl[a & b].Player_of_Match.value_counts().head(1)

"""###`Q-8:` Team1 vs Team2 Dashbord
Create a function which will take two string(name of two teams) as input. Show win Loss record between them and player getting most player of the match award in matches between these two teams.
```
team1_vs_team2('Kolkata Knight Riders','Chennai Super Kings')
```
"""

def record(a,b):
  dashboard = ipl[((ipl.Team1 == a) & (ipl.Team2 == b))|((ipl.Team1 == b) & (ipl.Team2 == a))]
  dashboard1 = dashboard['WinningTeam'].value_counts()
  print(dashboard1)
  print(dashboard['Player_of_Match'].value_counts().head(1))

record('Royal Challengers Bangalore','Chennai Super Kings')

"""### `Q-9:` Find out the top 7 cities where the matches of Kolkata Knight Riders are played frequently and plot the result as bar chart.

*`.plot(kind = "bar")` can help you to plot the bar chart. Also you can learn more about this method from [here](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.plot.html)*


"""

a = (ipl['Team1']=='Kolkata Knight Riders')|(ipl['Team2']=='Kolkata Knight Riders')
ipl[a].City.value_counts().head(7).plot.bar()

"""### `Q-10:` Find out the average margin for the team Mumbai Indians for only the session 2011."""

a = (ipl['Team1']=='Mumbai Indians')|(ipl['Team2']=='Mumbai Indians')
b = ipl['Season']=='2011'

ipl[a&b].Margin.mean()

